import { baseApi } from "../api/baseApi";

// Define the shape of the response data for ExperiencesResponse endpoints
interface ExperiencesResponse {
  _id: string;
  date: string;
  title: string;
  description: string;
  company: string;
  acknowledged: boolean;
}

// Define product-related API endpoints using `baseApi.injectEndpoints`
export const experiencesApi = baseApi.injectEndpoints({
  endpoints: (builder) => ({
    // Define a query to fetch all experiences
    getExperiences: builder.query<ExperiencesResponse[], string>({
      query: () => ({
        url: "/experiences",
        method: "GET",
      }),
      providesTags: ["experiences"], // Cache tag for this endpoint
    }),

    // Define a query to fetch a single experiences by ID
    getSingleExperiences: builder.query<ExperiencesResponse, string>({
      query: (id) => ({
        url: `/experiences/${id}`,
        method: "GET",
      }),
    }),

    // Define a mutation to create a new experiences
    createExperiences: builder.mutation<
      ExperiencesResponse,
      Partial<ExperiencesResponse>
    >({
      query: (body) => ({
        url: "/experiences",
        method: "POST",
        body,
      }),
      invalidatesTags: ["experiences"], // Invalidate product cache after creating a new experiences
    }),

    // Define a mutation to update an existing experiences
    updateExperiences: builder.mutation<
      ExperiencesResponse,
      { id: string; body: Partial<ExperiencesResponse> }
    >({
      query: ({ id, body }) => ({
        url: `/experiences/${id}`,
        method: "PUT",
        body,
      }),
      invalidatesTags: ["experiences"],
    }),

    // Define a mutation to delete a experiences by ID
    deleteExperiences: builder.mutation<ExperiencesResponse, string>({
      query: (id) => ({
        url: `/experiences/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: ["experiences"],
    }),
  }),
});

// Destructure hooks generated by the `ExperiencesApi` for easy use
export const {
  useGetExperiencesQuery,
  useCreateExperiencesMutation,
  useDeleteExperiencesMutation,
  useUpdateExperiencesMutation,
  useGetSingleExperiencesQuery,
} = experiencesApi;
